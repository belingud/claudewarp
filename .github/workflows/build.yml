name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  PROJECT_NAME: ClaudeWarp
  PYTHON_VERSION: "3.11"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: macos-13
            platform: macos
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python & UV
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Setup Nu shell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.99"

      - name: Install platform dependencies
        shell: nu {0}
        run: |
          let platform = "${{ matrix.platform }}"
          match $platform {
            "macos" => {
              print "🍎 Setting up macOS..."
              ^brew update
              ^brew install create-dmg
            }
            "linux" => {
              print "🐧 Setting up Linux..."
              ^sudo apt-get update
              ^sudo apt-get install -y libqt6gui6 libqt6widgets6 libqt6core6 qt6-base-dev libxcb-xinerama0 libxcb-cursor0 libgl1-mesa-dev libegl1 libfontconfig1 libglib2.0-0 libgtk-3-0 libx11-xcb1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0
              ^wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              ^chmod +x appimagetool-x86_64.AppImage
              ^sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
            }
            "windows" => {
              print "🪟 Setting up Windows..."
              # Windows 通常不需要额外依赖
            }
          }

      - name: Install Python dependencies
        run: |
          echo "📦 Installing dependencies with uv..."
          uv sync --all-groups --all-extras
          echo "✅ Dependencies installed"

      - name: Build application
        shell: nu {0}
        run: |
          let platform = "${{ matrix.platform }}"
          let arch = "${{ matrix.arch }}"
          print $"🔨 Building ($platform)-($arch) with Nuitka..."

          match $platform {
            "windows" => {
              print "🪟 Starting Windows build..."
              ^powershell -NonInteractive -ExecutionPolicy Bypass -File ./scripts/nuitka.ps1
            }
            _ => {
              print "🐧/🍎 Starting Linux/macOS build..."
              ^chmod +x scripts/nuitka.sh
              ^bash scripts/nuitka.sh
            }
          }

      - name: Prepare packages
        shell: nu {0}
        run: |
          print "📦 Preparing packages..."
          let platform = "${{ matrix.platform }}"
          ^mkdir -p dist
          match $platform {
            "macos" => {
              if ("build/main.app" | path exists) {
                print "Moving 'build/main.app' to 'dist/ClaudeWarp.app'"
                ^mv build/main.app dist/ClaudeWarp.app
              } else {
                print "⚠️ Nuitka output 'build/main.app' not found!"
              }
            }
            "windows" => {
              if ("build/main.exe" | path exists) {
                print "Moving 'build/main.exe' to 'dist/ClaudeWarp.exe'"
                ^mv build/main.exe dist/ClaudeWarp.exe
              } else {
                print "⚠️ Nuitka output 'build/main.exe' not found!"
              }
            }
            "linux" => {
              if ("build/main.bin" | path exists) {
                print "Moving 'build/main.bin' to 'dist/ClaudeWarp'"
                ^mv build/main.bin dist/ClaudeWarp
              } else {
                print "⚠️ Nuitka output 'build/main.bin' not found!"
              }
            }
          }
          print "✅ Packages prepared."

      - name: Create packages
        shell: nu {0}
        run: |
          # Get version from tag
          let version = if ("${{ github.ref }}" | str starts-with "refs/tags/") {
            "${{ github.ref }}" | str replace "refs/tags/" "" | str replace "v" ""
          } else {
            "dev"
          }

          let platform = "${{ matrix.platform }}"
          let arch = "${{ matrix.arch }}"

          match $platform {
            "macos" => {
              print "💿 Creating macOS packages..."
              if ("dist/ClaudeWarp.app" | path exists) {
                # Create ZIP
                let zip_name = $"ClaudeWarp-($version)-macos-($arch).zip"
                cd dist
                ^zip -r $"../($zip_name)" ClaudeWarp.app
                cd ..
                
                # Create DMG - 确保目标文件不存在
                let dmg_name = $"ClaudeWarp-($version)-macos-($arch).dmg"
                print $"Creating DMG: ($dmg_name)"
                
                # 清理可能存在的旧文件
                if ($dmg_name | path exists) {
                  ^rm -f $dmg_name
                }
                if ("dmg-temp" | path exists) {
                  ^rm -rf dmg-temp
                }
                
                ^mkdir -p dmg-temp
                ^cp -R dist/ClaudeWarp.app dmg-temp/
                
                try {
                  ^create-dmg --volname "ClaudeWarp" --window-pos 200 120 --window-size 600 300 --icon-size 100 --icon "ClaudeWarp.app" 175 120 --hide-extension "ClaudeWarp.app" --app-drop-link 425 120 --no-internet-enable --skip-jenkins $dmg_name "dmg-temp"
                  print $"✅ DMG created successfully: ($dmg_name)"
                  ^ls -al
                } catch {
                  print "⚠️ DMG creation failed, but ZIP is available"
                  ^ls -al
                  print "Error details:"
                  try { ^ls -al *.dmg } catch { print "No DMG files found" }
                }
                
                ^rm -rf dmg-temp
                print "✅ macOS packages created"
              }
            }
            "windows" => {
              print "🪟 Creating Windows package..."
              if ("dist/ClaudeWarp.exe" | path exists) {
                let zip_name = $"ClaudeWarp-($version)-windows-($arch).zip"
                cd dist
                ^powershell -c $"Compress-Archive -Path ClaudeWarp.exe -DestinationPath ../($zip_name)"
                cd ..
                print "✅ Windows package created"
              }
            }
            "linux" => {
              print "🐧 Creating Linux packages..."
              if ("dist/ClaudeWarp" | path exists) {
                # Create ZIP
                let zip_name = $"ClaudeWarp-($version)-linux-($arch).zip"
                ^mkdir -p linux-package
                ^cp dist/ClaudeWarp linux-package/
                if ("README.md" | path exists) { ^cp README.md linux-package/ }
                if ("LICENSE" | path exists) { ^cp LICENSE linux-package/ }
                cd linux-package
                ^zip -r $"../($zip_name)" *
                cd ..
                ^rm -rf linux-package
                
                # Create AppImage
                let appimage_name = $"ClaudeWarp-($version)-linux-($arch).AppImage"
                ^mkdir -p ClaudeWarp.AppDir/usr/bin ClaudeWarp.AppDir/usr/share/applications
                ^cp dist/ClaudeWarp ClaudeWarp.AppDir/usr/bin/
                
                # Copy desktop file template
                ^cp .github/templates/appimage/ClaudeWarp.desktop ClaudeWarp.AppDir/ClaudeWarp.desktop
                ^cp .github/templates/appimage/ClaudeWarp.desktop ClaudeWarp.AppDir/usr/share/applications/
                ^touch ClaudeWarp.AppDir/ClaudeWarp.png
                
                # Copy AppRun template
                ^cp .github/templates/appimage/AppRun ClaudeWarp.AppDir/AppRun
                ^chmod +x ClaudeWarp.AppDir/AppRun
                try {
                  ^appimagetool ClaudeWarp.AppDir $appimage_name
                } catch {
                  print "⚠️ AppImage creation failed, but ZIP is available"
                }
                ^rm -rf ClaudeWarp.AppDir
                print "✅ Linux packages created"
              }
            }
          }

      - name: List created packages
        shell: nu {0}
        run: |
          print "📦 Created packages:"
          ^ls -la *.zip *.dmg *.AppImage 2>/dev/null | lines | each { |line| print $"  ($line)" }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            *.zip
            *.dmg
            *.AppImage
          retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Nu shell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.99"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        shell: nu {0}
        run: |
          let version = "${{ github.ref }}" | str replace "refs/tags/" "" | str replace "v" ""
          print $"Creating release for version ($version)"

          # Create release with GitHub CLI
          let release_body = if (".github/templates/github/release_notes.md" | path exists) {
            open .github/templates/github/release_notes.md | str replace "{VERSION}" $version
          } else {
            $"ClaudeWarp v($version)\n\nAutomated release build.\n\nSee CHANGELOG.md for details."
          }
          ^gh release create $"v($version)" --title $"ClaudeWarp v($version)" --notes $release_body --draft=false

          # Find and upload all build artifacts
          cd artifacts
          print "📁 Checking artifacts directory structure:"
          ^ls -la

          # Use bash find command to locate only top-level package files
          # This avoids uploading internal files like base_library.zip that cause "asset under the same name already exists" errors
          let all_assets = (^find . -maxdepth 2 -name "*.zip" -o -name "*.dmg" -o -name "*.AppImage" | ^grep -v "/dist/" | ^grep -v "/build/" | lines)

          if ($all_assets | length) > 0 {
            print $"Found ($all_assets | length) assets to upload:"
            $all_assets | each { |file| print $"  - ($file)" }
            
            for file in $all_assets {
              print $"Uploading: ($file)"
              ^gh release upload $"v($version)" $file
            }
          } else {
            print "⚠️ No assets found to upload"
            print "Directory contents:"
            ^find . -type f | ^head -20
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Build Status
        run: |
          echo "📊 Build Summary:"
          echo "Build result: ${{ needs.build.result }}"

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All builds completed successfully!"
          else
            echo "❌ Build failed!"
            echo "Build status: ${{ needs.build.result }}"
            exit 1
          fi
